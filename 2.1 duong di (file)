#include <bits/stdc++.h> 
using namespace std; 
using ll=long long;
const int maxn=100005;
const long long INF=1e18;
const ll MOD=1e9+7;
#define pii pair<int,int>
#define pll pair<ll,ll>
#define sz(x) x.size()
#define rvs(a) reverse(a.begin(),a.end())
#define mst_bool(x) memset(x,false,sizeof(x))
#define mst_int(x) memset(x,0,sizeof(x))
#define fe(x,a) for(auto x:a)
#define Fe(x,a) for(auto &x:a)
#define vll vector<ll>
#define vi vector<int>
#define vb vector<bool>
int n,m,Start,End;
int cnt;
int a[1005][1005],P[1005];
bool vst[1005];

void input(){
    cin>>n>>Start>>End;
    for(int i=1;i<=n;i++){
        for(int j=1;j<=n;j++){
            cin>>a[i][j];
        }
    }
}

void OpenFile() {
    freopen("TK.INP", "r", stdin);
    freopen("TK.OUT", "w", stdout);
}

void bfs(){
    vst[Start]=true;
    queue <int> q;
    q.push(Start);
    while(!q.empty()){
        int u=q.front();q.pop();
        if(u==End)break;
        for(int v=1;v<=n;v++){
            if(!vst[v]&&a[u][v]){
                q.push(v);
                P[v]=u;
                vst[v]=true;
            }
        }
    }
}

void dfs(int u){
    vst[u]=true;
    if(vst[End])return ;
    for(int v=1;v<=n;v++){
        if(a[u][v]&&!vst[v]){
            P[v]=u;
            dfs(v);
        }
    }
}

void cal_path(){
    for(int i=1;i<=n;i++){
        if(a[Start][i]&&a[i][End])cnt++;
    }
    cout<<cnt;
}

void find_path(){
    if(!vst[End]){
        cout<<0;
        return;
    }
    int t=End;
    vector<int> path;
    while(t!=Start){
        path.push_back(t);
        t=P[t];
    }
    path.push_back(Start);
    reverse(path.begin(),path.end());
    for(auto x:path)cout<<x<<" ";
}

int main(){
    OpenFile();
    int t;
    cin>>t;
    input(); 
    if(t==1){
        cal_path();
    }
    else {
        dfs(Start);
        find_path();
    }
}
